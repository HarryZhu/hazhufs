// Code generated by protoc-gen-go. DO NOT EDIT.
// source: volume.proto

package volume

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Message struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	ErrCode              uint32   `protobuf:"varint,2,opt,name=ErrCode,proto3" json:"ErrCode,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Message) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "volume.Empty")
	proto.RegisterType((*Message)(nil), "volume.Message")
}

func init() { proto.RegisterFile("volume.proto", fileDescriptor_498b213ad3bcd5ad) }

var fileDescriptor_498b213ad3bcd5ad = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xcb, 0xcf, 0x29,
	0xcd, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xd8, 0xb9, 0x58,
	0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x95, 0x3c, 0xb9, 0xd8, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53,
	0x85, 0x04, 0xb8, 0x98, 0xbd, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0x40, 0x4c,
	0x21, 0x09, 0x2e, 0x76, 0xd7, 0xa2, 0x22, 0xe7, 0xfc, 0x94, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d,
	0xde, 0x20, 0x18, 0x57, 0x48, 0x88, 0x8b, 0xc5, 0x25, 0xb1, 0x24, 0x51, 0x82, 0x19, 0xac, 0x18,
	0xcc, 0x36, 0x7a, 0xc7, 0xcc, 0xc5, 0x1b, 0x06, 0x36, 0x3e, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39,
	0x55, 0xc8, 0x90, 0x8b, 0xdb, 0x23, 0x35, 0x31, 0xa7, 0x24, 0xc3, 0x39, 0x23, 0x35, 0x39, 0x5b,
	0x88, 0x5f, 0x0f, 0xea, 0x16, 0xa8, 0x8d, 0x52, 0xe8, 0x02, 0x4a, 0x0c, 0x42, 0xba, 0x5c, 0xec,
	0xee, 0xa9, 0x25, 0x6e, 0x99, 0x39, 0xa9, 0xc4, 0x2a, 0x0f, 0x26, 0x4d, 0xb9, 0x4b, 0x6a, 0x0e,
	0x29, 0xca, 0x9d, 0x12, 0xf3, 0x88, 0x56, 0x6e, 0xc5, 0x25, 0x10, 0x5c, 0x52, 0x94, 0x9a, 0x98,
	0xeb, 0x9e, 0x5a, 0x02, 0x0b, 0x54, 0x22, 0xf4, 0x69, 0x30, 0x1a, 0x30, 0x22, 0xf4, 0x06, 0x53,
	0xa0, 0xd7, 0x25, 0x35, 0x87, 0x6c, 0xbd, 0x4e, 0x89, 0x79, 0x24, 0xea, 0x4d, 0x62, 0x03, 0xa7,
	0x29, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xfe, 0xdd, 0xe5, 0x63, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VolumeServiceClient is the client API for VolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VolumeServiceClient interface {
	HealthCheck(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	GetFile(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	SetFile(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	DelFile(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	BanFile(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	StreamGetMessage(ctx context.Context, opts ...grpc.CallOption) (VolumeService_StreamGetMessageClient, error)
	StreamSetMessage(ctx context.Context, opts ...grpc.CallOption) (VolumeService_StreamSetMessageClient, error)
	StreamDelMessage(ctx context.Context, opts ...grpc.CallOption) (VolumeService_StreamDelMessageClient, error)
	StreamBanMessage(ctx context.Context, opts ...grpc.CallOption) (VolumeService_StreamBanMessageClient, error)
}

type volumeServiceClient struct {
	cc *grpc.ClientConn
}

func NewVolumeServiceClient(cc *grpc.ClientConn) VolumeServiceClient {
	return &volumeServiceClient{cc}
}

func (c *volumeServiceClient) HealthCheck(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/volume.VolumeService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) GetFile(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/volume.VolumeService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) SetFile(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/volume.VolumeService/SetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) DelFile(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/volume.VolumeService/DelFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) BanFile(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/volume.VolumeService/BanFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) StreamGetMessage(ctx context.Context, opts ...grpc.CallOption) (VolumeService_StreamGetMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VolumeService_serviceDesc.Streams[0], "/volume.VolumeService/StreamGetMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServiceStreamGetMessageClient{stream}
	return x, nil
}

type VolumeService_StreamGetMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type volumeServiceStreamGetMessageClient struct {
	grpc.ClientStream
}

func (x *volumeServiceStreamGetMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *volumeServiceStreamGetMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServiceClient) StreamSetMessage(ctx context.Context, opts ...grpc.CallOption) (VolumeService_StreamSetMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VolumeService_serviceDesc.Streams[1], "/volume.VolumeService/StreamSetMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServiceStreamSetMessageClient{stream}
	return x, nil
}

type VolumeService_StreamSetMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type volumeServiceStreamSetMessageClient struct {
	grpc.ClientStream
}

func (x *volumeServiceStreamSetMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *volumeServiceStreamSetMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServiceClient) StreamDelMessage(ctx context.Context, opts ...grpc.CallOption) (VolumeService_StreamDelMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VolumeService_serviceDesc.Streams[2], "/volume.VolumeService/StreamDelMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServiceStreamDelMessageClient{stream}
	return x, nil
}

type VolumeService_StreamDelMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type volumeServiceStreamDelMessageClient struct {
	grpc.ClientStream
}

func (x *volumeServiceStreamDelMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *volumeServiceStreamDelMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *volumeServiceClient) StreamBanMessage(ctx context.Context, opts ...grpc.CallOption) (VolumeService_StreamBanMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VolumeService_serviceDesc.Streams[3], "/volume.VolumeService/StreamBanMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServiceStreamBanMessageClient{stream}
	return x, nil
}

type VolumeService_StreamBanMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type volumeServiceStreamBanMessageClient struct {
	grpc.ClientStream
}

func (x *volumeServiceStreamBanMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *volumeServiceStreamBanMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VolumeServiceServer is the server API for VolumeService service.
type VolumeServiceServer interface {
	HealthCheck(context.Context, *Message) (*Message, error)
	GetFile(context.Context, *Message) (*Message, error)
	SetFile(context.Context, *Message) (*Message, error)
	DelFile(context.Context, *Message) (*Message, error)
	BanFile(context.Context, *Message) (*Message, error)
	StreamGetMessage(VolumeService_StreamGetMessageServer) error
	StreamSetMessage(VolumeService_StreamSetMessageServer) error
	StreamDelMessage(VolumeService_StreamDelMessageServer) error
	StreamBanMessage(VolumeService_StreamBanMessageServer) error
}

// UnimplementedVolumeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVolumeServiceServer struct {
}

func (*UnimplementedVolumeServiceServer) HealthCheck(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedVolumeServiceServer) GetFile(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (*UnimplementedVolumeServiceServer) SetFile(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFile not implemented")
}
func (*UnimplementedVolumeServiceServer) DelFile(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFile not implemented")
}
func (*UnimplementedVolumeServiceServer) BanFile(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanFile not implemented")
}
func (*UnimplementedVolumeServiceServer) StreamGetMessage(srv VolumeService_StreamGetMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGetMessage not implemented")
}
func (*UnimplementedVolumeServiceServer) StreamSetMessage(srv VolumeService_StreamSetMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSetMessage not implemented")
}
func (*UnimplementedVolumeServiceServer) StreamDelMessage(srv VolumeService_StreamDelMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDelMessage not implemented")
}
func (*UnimplementedVolumeServiceServer) StreamBanMessage(srv VolumeService_StreamBanMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBanMessage not implemented")
}

func RegisterVolumeServiceServer(s *grpc.Server, srv VolumeServiceServer) {
	s.RegisterService(&_VolumeService_serviceDesc, srv)
}

func _VolumeService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume.VolumeService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).HealthCheck(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume.VolumeService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).GetFile(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_SetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).SetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume.VolumeService/SetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).SetFile(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_DelFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).DelFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume.VolumeService/DelFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).DelFile(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_BanFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).BanFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume.VolumeService/BanFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).BanFile(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_StreamGetMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VolumeServiceServer).StreamGetMessage(&volumeServiceStreamGetMessageServer{stream})
}

type VolumeService_StreamGetMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type volumeServiceStreamGetMessageServer struct {
	grpc.ServerStream
}

func (x *volumeServiceStreamGetMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *volumeServiceStreamGetMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VolumeService_StreamSetMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VolumeServiceServer).StreamSetMessage(&volumeServiceStreamSetMessageServer{stream})
}

type VolumeService_StreamSetMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type volumeServiceStreamSetMessageServer struct {
	grpc.ServerStream
}

func (x *volumeServiceStreamSetMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *volumeServiceStreamSetMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VolumeService_StreamDelMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VolumeServiceServer).StreamDelMessage(&volumeServiceStreamDelMessageServer{stream})
}

type VolumeService_StreamDelMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type volumeServiceStreamDelMessageServer struct {
	grpc.ServerStream
}

func (x *volumeServiceStreamDelMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *volumeServiceStreamDelMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VolumeService_StreamBanMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VolumeServiceServer).StreamBanMessage(&volumeServiceStreamBanMessageServer{stream})
}

type VolumeService_StreamBanMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type volumeServiceStreamBanMessageServer struct {
	grpc.ServerStream
}

func (x *volumeServiceStreamBanMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *volumeServiceStreamBanMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VolumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "volume.VolumeService",
	HandlerType: (*VolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _VolumeService_HealthCheck_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _VolumeService_GetFile_Handler,
		},
		{
			MethodName: "SetFile",
			Handler:    _VolumeService_SetFile_Handler,
		},
		{
			MethodName: "DelFile",
			Handler:    _VolumeService_DelFile_Handler,
		},
		{
			MethodName: "BanFile",
			Handler:    _VolumeService_BanFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGetMessage",
			Handler:       _VolumeService_StreamGetMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamSetMessage",
			Handler:       _VolumeService_StreamSetMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamDelMessage",
			Handler:       _VolumeService_StreamDelMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamBanMessage",
			Handler:       _VolumeService_StreamBanMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "volume.proto",
}
