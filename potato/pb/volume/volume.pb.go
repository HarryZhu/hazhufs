// Code generated by protoc-gen-go. DO NOT EDIT.
// source: volume.proto

package volume

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Message struct {
	Code                 int32    `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Okay                 bool     `protobuf:"varint,2,opt,name=Okay,proto3" json:"Okay,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Message) GetOkay() bool {
	if m != nil {
		return m.Okay
	}
	return false
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type File struct {
	Key                  string   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_498b213ad3bcd5ad, []int{2}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *File) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "volume.Empty")
	proto.RegisterType((*Message)(nil), "volume.Message")
	proto.RegisterType((*File)(nil), "volume.File")
}

func init() { proto.RegisterFile("volume.proto", fileDescriptor_498b213ad3bcd5ad) }

var fileDescriptor_498b213ad3bcd5ad = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0xcb, 0xcf, 0x29,
	0xcd, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xd8, 0xb9, 0x58,
	0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x95, 0x5c, 0xb9, 0xd8, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53,
	0x85, 0x84, 0xb8, 0x58, 0x9c, 0xf3, 0x53, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0xc0,
	0x6c, 0x90, 0x98, 0x7f, 0x76, 0x62, 0xa5, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x98, 0x0d,
	0x12, 0x73, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x95, 0x74,
	0xb8, 0x58, 0xdc, 0x32, 0x73, 0x52, 0x85, 0x04, 0xb8, 0x98, 0xbd, 0x53, 0x2b, 0xc1, 0x46, 0x70,
	0x06, 0x81, 0x98, 0x70, 0xd5, 0x4c, 0x08, 0xd5, 0x46, 0x0b, 0x18, 0xb9, 0x78, 0xc3, 0xc0, 0x0e,
	0x09, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0x32, 0xe4, 0xe2, 0xf6, 0x48, 0x4d, 0xcc, 0x29,
	0xc9, 0x70, 0xce, 0x48, 0x4d, 0xce, 0x16, 0xe2, 0xd7, 0x83, 0xba, 0x1a, 0xea, 0x36, 0x29, 0x74,
	0x01, 0x25, 0x06, 0x21, 0x0d, 0x2e, 0x8e, 0xa0, 0xd4, 0xc4, 0x14, 0xb0, 0xb5, 0x3c, 0x30, 0x69,
	0x10, 0x4f, 0x0a, 0x85, 0xa7, 0xc4, 0x20, 0x64, 0xc4, 0xc5, 0x17, 0x5c, 0x52, 0x94, 0x9a, 0x98,
	0x1b, 0x9c, 0x9a, 0x47, 0x84, 0x7a, 0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0x70, 0x78, 0x19, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x26, 0x63, 0x3d, 0x3f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VolumeServiceClient is the client API for VolumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VolumeServiceClient interface {
	HealthCheck(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	ReadFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*File, error)
	StreamSendFile(ctx context.Context, opts ...grpc.CallOption) (VolumeService_StreamSendFileClient, error)
}

type volumeServiceClient struct {
	cc *grpc.ClientConn
}

func NewVolumeServiceClient(cc *grpc.ClientConn) VolumeServiceClient {
	return &volumeServiceClient{cc}
}

func (c *volumeServiceClient) HealthCheck(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/volume.VolumeService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) ReadFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, "/volume.VolumeService/ReadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeServiceClient) StreamSendFile(ctx context.Context, opts ...grpc.CallOption) (VolumeService_StreamSendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VolumeService_serviceDesc.Streams[0], "/volume.VolumeService/StreamSendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeServiceStreamSendFileClient{stream}
	return x, nil
}

type VolumeService_StreamSendFileClient interface {
	Send(*File) error
	Recv() (*File, error)
	grpc.ClientStream
}

type volumeServiceStreamSendFileClient struct {
	grpc.ClientStream
}

func (x *volumeServiceStreamSendFileClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *volumeServiceStreamSendFileClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VolumeServiceServer is the server API for VolumeService service.
type VolumeServiceServer interface {
	HealthCheck(context.Context, *Message) (*Message, error)
	ReadFile(context.Context, *File) (*File, error)
	StreamSendFile(VolumeService_StreamSendFileServer) error
}

// UnimplementedVolumeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVolumeServiceServer struct {
}

func (*UnimplementedVolumeServiceServer) HealthCheck(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedVolumeServiceServer) ReadFile(ctx context.Context, req *File) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (*UnimplementedVolumeServiceServer) StreamSendFile(srv VolumeService_StreamSendFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSendFile not implemented")
}

func RegisterVolumeServiceServer(s *grpc.Server, srv VolumeServiceServer) {
	s.RegisterService(&_VolumeService_serviceDesc, srv)
}

func _VolumeService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume.VolumeService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).HealthCheck(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeServiceServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/volume.VolumeService/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeServiceServer).ReadFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeService_StreamSendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VolumeServiceServer).StreamSendFile(&volumeServiceStreamSendFileServer{stream})
}

type VolumeService_StreamSendFileServer interface {
	Send(*File) error
	Recv() (*File, error)
	grpc.ServerStream
}

type volumeServiceStreamSendFileServer struct {
	grpc.ServerStream
}

func (x *volumeServiceStreamSendFileServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func (x *volumeServiceStreamSendFileServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VolumeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "volume.VolumeService",
	HandlerType: (*VolumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _VolumeService_HealthCheck_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _VolumeService_ReadFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSendFile",
			Handler:       _VolumeService_StreamSendFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "volume.proto",
}
